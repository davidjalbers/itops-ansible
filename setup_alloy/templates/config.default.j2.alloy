//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// METRICS /////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////// NODE_EXPORTER: System metrics /////////////////////////////

prometheus.exporter.unix "node_exporter" { }

prometheus.scrape "node_exporter" { 
  targets    = prometheus.exporter.unix.node_exporter.targets
  forward_to = [prometheus.relabel.node_exporter.receiver]
}

prometheus.relabel "node_exporter" {
  forward_to = [prometheus.relabel.final.receiver]

  // these two are really noisy
  rule {
    action        = "drop"
    source_labels = ["__name__"]
    regex         = "(node_scrape_collector_duration_seconds|node_scrape_collector_success)"
  }

  rule {
    target_label = "job"
    replacement  = "metrics/node"
  }
}

{% if b_alloy_configure_traefik_metrics %}
////////////////////////////// TRAEFIK: HTTP request metrics /////////////////////////////

prometheus.scrape "traefik" {
  targets = [
    {__address__ = "{{ alloy_traefik_metrics_endpoint }}"},
  ]
  forward_to = [prometheus.relabel.traefik.receiver]
}

prometheus.relabel "traefik" {
  forward_to = [prometheus.relabel.final.receiver]

  rule {
    target_label = "job"
    replacement  = "metrics/traefik"
  }
}

{% endif %}
//////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// LOGS //////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////// LOCAL: .log files in /var and /tmp ///////////////////////////

local.file_match "local" {
  path_targets = [
    {__path__ = "/var/log/*.log"},
    {__path__ = "/tmp/log/*.log"},
  ]
}

// automatically includes __path__ as a "filename" label 
loki.source.file "local" {
  targets    = local.file_match.local.targets
  forward_to = [loki.relabel.local.receiver]
}

loki.relabel "local" {
  forward_to = [loki.relabel.final.receiver]

  rule {
    target_label = "job"
    replacement  = "logs/local"
  }
}

/////////////////////////// SYSLOG: /var/log/syslog ///////////////////////////

loki.source.file "syslog" {
  targets = [
    {__path__ = "/var/log/syslog"},
  ]
  forward_to = [loki.relabel.syslog.receiver]
}

loki.relabel "syslog" {
  forward_to = [loki.relabel.final.receiver]

  rule {
    target_label = "job"
    replacement  = "logs/syslog"
  }
}

/////////////////////////// JOURNAL: systemd journal //////////////////////////

loki.relabel "journal" {
  forward_to = []

  rule {
    source_labels = ["__journal__systemd_unit"]
    target_label  = "unit"
  }

  rule {
    target_label = "job"
    replacement  = "logs/journal"
  }
}

loki.source.journal "journal" {
  forward_to    = [loki.relabel.final.receiver]
  // We have to use relabel_rules instead of forwarding to the relabel receiver,
  // because the journal source strips the __journal labels before forwarding
  relabel_rules = loki.relabel.journal.rules
}

{% if b_alloy_configure_docker_logs %}
/////////////////////////// DOCKER: container logs ////////////////////////////

discovery.docker "docker" {
  host = "unix:///var/run/docker.sock"
}

loki.relabel "docker" {
  forward_to = []

  rule {
    target_label = "job"
    replacement  = "logs/docker"
  }

  rule {
    source_labels = ["__meta_docker_container_name"]
    regex         = "/(.*)"
    target_label  = "container_name"
  }
}

loki.source.docker "docker" {
  host          = "unix:///var/run/docker.sock"
  targets       = discovery.docker.docker.targets
  forward_to    = [loki.relabel.final.receiver]
  // We have to use relabel_rules instead of forwarding to the relabel receiver,
  // because the docker source strips the __meta labels before forwarding
  relabel_rules = loki.relabel.docker.rules
}

{% endif %}
///////////////////////// PROMETHEUS & LOKI: remote write /////////////////////

prometheus.relabel "final" {
  forward_to = [prometheus.remote_write.my_prometheus.receiver]

  {% if b_alloy_configure_xproject_labels %}
  rule {
    target_label = "service_name"
    replacement  = "xproject-{{ xproject_namespace }}-{{ xproject_name }}-{{ xproject_environment }}"
  }

  rule {
    target_label = "xproject_namespace"
    replacement  = "{{ xproject_namespace }}"
  }

  rule {
    target_label = "xproject_name"
    replacement  = "{{ xproject_name }}"
  }

  rule {
    target_label = "xproject_id"
    replacement  = "{{ xproject_namespace }}/{{ xproject_name }}"
  }

  rule {
    target_label = "xproject_environment"
    replacement  = "{{ xproject_environment }}"
  }

  {% endif %}
  rule {
    target_label = "instance"
    replacement  = constants.hostname
  }
}

prometheus.remote_write "my_prometheus" {
  endpoint {
    url = "{{ alloy_prometheus_endpoint }}"

    basic_auth {
      username = "{{ alloy_prometheus_basicauth_username }}"
      password = "{{ alloy_prometheus_basicauth_password }}"
    }
  }
}

loki.relabel "final" {
  forward_to = [loki.write.my_loki.receiver]

  {% if b_alloy_configure_xproject_labels %}
  rule {
    target_label = "service_name"
    replacement  = "xproject-{{ xproject_namespace }}-{{ xproject_name }}-{{ xproject_environment }}"
  }

  rule {
    target_label = "xproject_namespace"
    replacement  = "{{ xproject_namespace }}"
  }

  rule {
    target_label = "xproject_name"
    replacement  = "{{ xproject_name }}"
  }

  rule {
    target_label = "xproject_id"
    replacement  = "{{ xproject_namespace }}/{{ xproject_name }}"
  }

  rule {
    target_label = "xproject_environment"
    replacement  = "{{ xproject_environment }}"
  }

  {% endif %}
  rule {
    target_label = "instance"
    replacement  = constants.hostname
  }
}

loki.write "my_loki" {
  endpoint {
    url = "{{ alloy_loki_endpoint }}"

    basic_auth {
      username = "{{ alloy_loki_basicauth_username }}"
      password = "{{ alloy_loki_basicauth_password }}"
    }
  }
}
